import datetime
import telebot
from telebot import types
import sqlite3

bot = telebot.TeleBot("6608156741:AAGt8-MxAnGZ8-r2zJkb_rzFd7SPpHx_1bY")

# –ó–º—ñ–Ω–Ω—ñ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Å—Ç–∞–Ω—É –ø–µ—Ä–µ–≥–ª—è–¥—É
feedback_offset = 0
feedback_limit = 5
rating_offset = 0
rating_limit = 5

# –ö–æ–º–∞–Ω–¥–∏ –±–æ—Ç–∞

# –ö–æ–º–∞–Ω–¥–∏ —Å—Ç–∞—Ä—Ç #
@bot.message_handler(commands=['start'])
def start(message):
    user_first_name = str(message.chat.first_name)
    current_hour = datetime.datetime.now().hour

    if 7 <= current_hour < 12:
        greeting = "–î–æ–±—Ä–∏–π —Ä–∞–Ω–æ–∫"
    elif 12 <= current_hour < 18:
        greeting = "–î–æ–±—Ä–∏–π –¥–µ–Ω—å"
    elif 18 <= current_hour <= 23:
        greeting = "–î–æ–±—Ä–∏–π –≤–µ—á—ñ—Ä"
    else:
        greeting = "–î–æ–±—Ä–æ—ó –Ω–æ—á—ñ"

    # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫–∏ —É –º–µ–Ω—é
    markup1 = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn = types.KeyboardButton(text='üìë –Ü—Å—Ç–æ—Ä—ñ—è –≤—ñ–¥–≥—É–∫—ñ–≤')
    btn1 = types.KeyboardButton(text='üìë –Ü—Å—Ç–æ—Ä—ñ—è –æ—Ü—ñ–Ω–æ–∫ —è–∫–æ—Å—Ç—ñ —Ä–æ–±–æ—Ç–∏ –ª—ñ—Ü–µ—é')
    markup1.add(btn)
    markup1.add(btn1)

    bot.send_message(message.from_user.id, f"{greeting}, {user_first_name}", reply_markup=markup1)
    bot.send_message(message.from_user.id,
                     f"*–Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è*:\n –ü—ñ—Å–ª—è —Å—Ç–∞—Ä—Ç—É –±–æ—Ç–∞ —É –≤–∞—Å –∑'—è–≤–∏—Ç—å—Å—è –º–µ–Ω—é, "
                     '–¥–µ –≤–∞–º –±—É–¥–µ –∑–∞–ø—Ä–æ–ø–æ–Ω–æ–≤–∞–Ω–∏–π –≤–∏–±—ñ—Ä –æ–±—Ä–∞—Ç–∏ –∫–Ω–æ–ø–∫–∏ "üìë –Ü—Å—Ç–æ—Ä—ñ—è –≤—ñ–¥–≥—É–∫—ñ–≤" —Ç–∞ "üìë –Ü—Å—Ç–æ—Ä—ñ—è –æ—Ü—ñ–Ω–æ–∫ —è–∫–æ—Å—Ç—ñ —Ä–æ–±–æ—Ç–∏ –ª—ñ—Ü–µ—é". –ü—Ä–∏ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—ñ –Ω–∞ –æ–¥–Ω—É –∑ –Ω–∏—Ö –¥–æ—Ç—Ä–∏–º—É–π—Ç–µ—Å—å –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏—Ö –∫—Ä–æ–∫—ñ–≤, —â–æ –ø—Ä–æ–ø–∏—Å–∞–Ω—ñ —Ç–∞–º. \n'
                     '–ê —Ç–∞–∫–æ–∂ –Ω–∏–∂—á–µ –≤–∏ –º–æ–∂–µ—Ç–µ –ø–æ–¥–∏–≤–∏—Ç–∏—Å—å –Ω–∞ —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥, —è–∫—ñ –∑–∞—Ä–∞–∑ —ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—å –Ω–∏–º–∏.\n'
                     f'*–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:*\n '
                     '1. /start - –∑–∞–ø—É—Å–∫ –±–æ—Ç—É (—Å—Ç–∞—Ä—Ç);\n '
                     '2. /Viewresponse - –ü–µ—Ä–µ–¥–∏–≤–∏—Ç–∏—Å—å —ñ—Å—Ç–æ—Ä—ñ—é –≤—ñ–¥–≥—É–∫—ñ–≤ (–∞–±–æ –ø—Ä–æ—Ö–∞–Ω–Ω—å, –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ–π —Ç–∞ –∑–∞—É–≤–∞–∂–µ–Ω—å);\n '
                     '3. /Viewraiting - –ü–µ—Ä–µ–¥–∏–≤–∏—Ç–∏—Å—å —ñ—Å—Ç–æ—Ä—ñ—é –æ—Ü—ñ–Ω–æ–∫ —è–∫–æ—Å—Ç—ñ —Ä–æ–±–æ—Ç–∏ –ª—ñ—Ü–µ—é;',
                     parse_mode='Markdown', reply_markup=markup1)

    bot.send_message(message.from_user.id, "–í–∏–±–µ—Ä—ñ—Ç—å –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏–π –ø—É–Ω–∫—Ç –∑ –º–µ–Ω—é –Ω–∏–∂—á–µ‚§µÔ∏è", reply_markup=markup1)

# –ö–æ–º–∞–Ω–¥–∞ Viewresponse #
@bot.message_handler(commands=['Viewresponse'])
def view_response(message):
    global feedback_offset
    feedback_offset = 0  # –°–∫–∏–¥–∞—î–º–æ offset –ø—Ä–∏ –Ω–æ–≤–æ–º—É –∑–∞–ø–∏—Ç—ñ

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn_right = types.KeyboardButton(text="‚û°Ô∏è")
    btn_left = types.KeyboardButton(text="‚¨ÖÔ∏è")
    btn_cancel = types.KeyboardButton(text='‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏')
    markup.add(btn_left, btn_right)
    markup.add(btn_cancel)

    rows = get_feedback(feedback_offset, feedback_limit)
    bot.send_message(message.from_user.id, "–°—Ç—Ä—ñ–ª–æ—á–∫–∞–º–∏ –≤–∏ –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–º–∏–∫–∞—Ç–∏ –∞–±–∏ –ø–æ–¥–∏–≤–∏—Ç–∏—Å—å –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ 5 –∑–∞–ø–∏—Å—ñ–≤(—Å—Ç—Ä—ñ–ª–∫–∞ –≤–ª—ñ–≤–æ) —á–∏ –Ω–∞—Å—Ç—É–ø–Ω—ñ(—Å—Ç—Ä—ñ–ª–∫–∞ –≤–ø—Ä–∞–≤–æ)", reply_markup=markup)
    bot.send_message(message.from_user.id, "–í—ñ–¥–≥—É–∫–∏:", reply_markup=markup)
    print_feedback(rows, message.chat.id)

    bot.register_next_step_handler(message, handle_feedback_navigation, markup)


def get_feedback(offset, limit):
    connection = sqlite3.connect('MurafaLicey.db')
    cursor = connection.cursor()

    query = "SELECT * FROM Feedback LIMIT ? OFFSET ?"
    cursor.execute(query, (limit, offset))

    rows = cursor.fetchall()

    connection.close()

    return rows


def print_feedback(rows, chat_id):
    for row in rows:
        bot.send_message(chat_id, f"ID: {row[0]}\n Date: {row[1]}\n –ü—Ä—ñ–∑–≤–∏—â–µ —Ç–∞ —ñ–º'—è: {row[2]}\n –í—ñ–¥–≥—É–∫: {row[3]}")


def handle_feedback_navigation(message, markup):
    global feedback_offset

    if message.text == '‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏':
        start(message)
        return  
    elif message.text == '‚û°Ô∏è':
        feedback_offset += feedback_limit
    elif message.text == '‚¨ÖÔ∏è':
        feedback_offset = max(0, feedback_offset - feedback_limit)

    rows = get_feedback(feedback_offset, feedback_limit)
    bot.send_message(message.from_user.id, "–í—ñ–¥–≥—É–∫–∏:", reply_markup=markup)
    print_feedback(rows, message.chat.id)

    bot.register_next_step_handler(message, handle_feedback_navigation, markup)

# –ö–æ–º–∞–Ω–¥–∞ Viewraiting #
@bot.message_handler(commands=['Viewraiting'])
def view_rating(message):
    global rating_offset
    rating_offset = 0  # –°–∫–∏–¥–∞—î–º–æ offset –ø—Ä–∏ –Ω–æ–≤–æ–º—É –∑–∞–ø–∏—Ç—ñ

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn_right = types.KeyboardButton(text="‚û°Ô∏è")
    btn_left = types.KeyboardButton(text="‚¨ÖÔ∏è")
    btn_cancel = types.KeyboardButton(text='‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏')
    markup.add(btn_left, btn_right)
    markup.add(btn_cancel)

    rows = get_rating(rating_offset, rating_limit)
    bot.send_message(message.from_user.id, "–°—Ç—Ä—ñ–ª–æ—á–∫–∞–º–∏ –≤–∏ –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–º–∏–∫–∞—Ç–∏ –∞–±–∏ –ø–æ–¥–∏–≤–∏—Ç–∏—Å—å –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ 5 –∑–∞–ø–∏—Å—ñ–≤(—Å—Ç—Ä—ñ–ª–∫–∞ –≤–ª—ñ–≤–æ) —á–∏ –Ω–∞—Å—Ç—É–ø–Ω—ñ(—Å—Ç—Ä—ñ–ª–∫–∞ –≤–ø—Ä–∞–≤–æ)", reply_markup=markup)
    bot.send_message(message.from_user.id, "–û—Ü—ñ–Ω–∫–∞ —è–∫–æ—Å—Ç—ñ:", reply_markup=markup)
    print_rating(rows, message.chat.id)

    bot.register_next_step_handler(message, handle_rating_navigation, markup)


def get_rating(offset, limit):
    connection = sqlite3.connect('MurafaLicey.db')
    cursor = connection.cursor()

    query = "SELECT * FROM Raiting LIMIT ? OFFSET ?"
    cursor.execute(query, (limit, offset))

    rows = cursor.fetchall()

    connection.close()

    return rows


def print_rating(rows, chat_id):
    for row in rows:
        bot.send_message(chat_id, f"ID: {row[0]}\n Date: {row[1]}\n –û—Ü—ñ–Ω–∫–∞: {row[2]}\n")


def handle_rating_navigation(message, markup):
    global rating_offset

    if message.text == '‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏':
        start(message)
        return  
    elif message.text == '‚û°Ô∏è':
        rating_offset += rating_limit
    elif message.text == '‚¨ÖÔ∏è':
        rating_offset = max(0, rating_offset - rating_limit)

    rows = get_rating(rating_offset, rating_limit)
    bot.send_message(message.from_user.id, "–û—Ü—ñ–Ω–∫–∞ —è–∫–æ—Å—Ç—ñ:", reply_markup=markup)
    print_rating(rows, message.chat.id)

    bot.register_next_step_handler(message, handle_rating_navigation, markup)

@bot.message_handler(content_types=['text'])
def handle_text_messages(message):
    if message.text == 'üìë –Ü—Å—Ç–æ—Ä—ñ—è –≤—ñ–¥–≥—É–∫—ñ–≤':
        view_response(message)
    elif message.text == 'üìë –Ü—Å—Ç–æ—Ä—ñ—è –æ—Ü—ñ–Ω–æ–∫ —è–∫–æ—Å—Ç—ñ —Ä–æ–±–æ—Ç–∏ –ª—ñ—Ü–µ—é':
        view_rating(message)
    elif message.text == '‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏':
        start(message)
    else:
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—ñ –≤–≤–æ–¥—É –∫–æ–º–∞–Ω–¥–∏
        allowed_commands = ['/start', '/Viewresponse', '/Viewraiting']

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –≤–≤–µ–¥–µ–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —î –∫–æ–º–∞–Ω–¥–æ—é
        if message.text.startswith('/'):
            # –Ø–∫—â–æ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ —î –≤ —Å–ø–∏—Å–∫—É –¥–æ–∑–≤–æ–ª–µ–Ω–∏—Ö –∫–æ–º–∞–Ω–¥
            if message.text not in allowed_commands:
                bot.send_message(message.chat.id, "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞ –∫–æ–º–∞–Ω–¥–∞. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –æ–¥–Ω—É –∑ –Ω–∞—Å—Ç—É–ø–Ω–∏—Ö –∫–æ–º–∞–Ω–¥: /start, /Viewresponse, /Viewraiting.")
        else:
            bot.send_message(message.chat.id, "–ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó.")

bot.infinity_polling(timeout=20)
